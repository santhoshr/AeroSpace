From 6172857555abd9d0ab7b3cf87e731b60ab3c5789 Mon Sep 17 00:00:00 2001
From: santhoshr <santhoshr@live.com>
Date: Fri, 28 Feb 2025 06:17:27 +0530
Subject: [PATCH] removed too much debug statements

---
 .../AppBundle/layout/layoutRecursive.swift    |  2 -
 Sources/AppBundle/tree/EmptySplit.swift       | 17 ----
 Sources/AppBundle/tree/EmptySplitVisual.swift | 88 +++++++++----------
 3 files changed, 41 insertions(+), 66 deletions(-)

diff --git a/Sources/AppBundle/layout/layoutRecursive.swift b/Sources/AppBundle/layout/layoutRecursive.swift
index dd9737b..18343ec 100644
--- a/Sources/AppBundle/layout/layoutRecursive.swift
+++ b/Sources/AppBundle/layout/layoutRecursive.swift
@@ -50,13 +50,11 @@ private extension TreeNode {
                 return // Nothing to do for weirdos
             case .emptySplit(let split):
                 // Layout the empty split
-                print("DEBUG: Setting empty split \(split.id) physical rect to \(physicalRect)")
                 lastAppliedLayoutPhysicalRect = physicalRect
                 lastAppliedLayoutVirtualRect = virtual
                 
                 // Update visual after layout is applied
                 DispatchQueue.main.async {
-                    print("DEBUG: Calling updateVisual after layout for split \(split.id)")
                     split.updateVisual()
                 }
         }
diff --git a/Sources/AppBundle/tree/EmptySplit.swift b/Sources/AppBundle/tree/EmptySplit.swift
index 4f193e7..cc965c5 100644
--- a/Sources/AppBundle/tree/EmptySplit.swift
+++ b/Sources/AppBundle/tree/EmptySplit.swift
@@ -16,7 +16,6 @@ class EmptySplit: TreeNode {
         self.id = UUID()
         self.lastFloatingSize = lastFloatingSize
         super.init(parent: parent, adaptiveWeight: adaptiveWeight, index: index)
-        print("DEBUG: EmptySplit created with ID \(id)")
     }
     
     /// Replace this empty split with a window
@@ -40,14 +39,9 @@ class EmptySplit: TreeNode {
     /// Focus this empty split
     @discardableResult
     func focusEmptySplit() -> Bool {
-        print("DEBUG: focusEmptySplit called for split \(id)")
         markAsMostRecentChild()
         let result = setFocus(to: LiveFocus(windowOrNil: nil, emptySplitOrNil: self, workspace: mostRecentWorkspaceParent))
-        
-        // Explicitly call updateVisual after focusing
-        print("DEBUG: Explicitly calling updateVisual after focus")
         updateVisual()
-        
         return result
     }
     
@@ -58,29 +52,18 @@ class EmptySplit: TreeNode {
     
     /// Update the visual representation of this empty split
     func updateVisual() {
-        print("DEBUG: updateVisual called for split \(id)")
-        
-        // Check if we have a valid frame for rendering
         let frame = getFrameForRendering()
-        print("DEBUG: Frame for rendering: \(String(describing: frame))")
-        
-        // Use the helper function to get or create a visual
         let visual = getOrCreateVisual(for: self)
-        
-        // Show the border
-        print("DEBUG: Calling showBorder() on visual")
         visual.showBorder()
     }
     
     /// Clean up when this empty split is removed
     func cleanup() {
-        print("DEBUG: Cleaning up emptySplit \(id)")
         removeVisual(for: id)
     }
     
     /// Deinitializer to ensure cleanup
     deinit {
-        print("DEBUG: Deinitializing emptySplit \(id)")
         cleanup()
     }
     
diff --git a/Sources/AppBundle/tree/EmptySplitVisual.swift b/Sources/AppBundle/tree/EmptySplitVisual.swift
index c2f8eab..99990bb 100644
--- a/Sources/AppBundle/tree/EmptySplitVisual.swift
+++ b/Sources/AppBundle/tree/EmptySplitVisual.swift
@@ -5,141 +5,135 @@ import Common
 class EmptySplitVisual {
     /// The empty split this visual represents
     private let emptySplit: EmptySplit
-    
+
     /// The layer used to render the border
     private var borderView: NSView?
-    
+
     /// Border color for focused empty split
     private let focusedBorderColor = NSColor(red: 0.0, green: 0.6, blue: 1.0, alpha: 0.9)
-    
+
     /// Border width
     private let borderWidth: CGFloat = 2.0
-    
+
     /// Initialize with an empty split
     init(emptySplit: EmptySplit) {
         self.emptySplit = emptySplit
-        print("DEBUG: EmptySplitVisual initialized for split \(emptySplit.id)")
     }
-    
+
     /// Show the border around the empty split
     func showBorder() {
         // Remove existing border if any
         hideBorder()
-        
+
         // Get the frame for rendering
         guard let frame = emptySplit.getFrameForRendering() else {
-            print("DEBUG: No frame available for rendering, cannot show border")
             return
         }
-        
-        print("DEBUG: Showing border for split \(emptySplit.id) at \(frame.topLeftX), \(frame.topLeftY), \(frame.width)x\(frame.height)")
-        
+
         // Try multiple approaches to find a window to add our border view to
         var targetWindow: NSWindow?
-        
+
         // First try: Use the key window
         if let keyWindow = NSApp.keyWindow {
             targetWindow = keyWindow
         }
-        
+
         // Second try: Find first visible window on the same screen
         if targetWindow == nil {
             let screenFrame = NSScreen.main?.frame ?? NSRect.zero
             for window in NSApp.windows {
-                if window.isVisible && !window.isExcludedFromWindowsMenu && 
-                   NSIntersectsRect(window.frame, screenFrame) {
+                if window.isVisible && !window.isExcludedFromWindowsMenu
+                    && NSIntersectsRect(window.frame, screenFrame)
+                {
                     targetWindow = window
                     break
                 }
             }
         }
-        
+
         // Third try: Create our own window if nothing else works
         if targetWindow == nil {
             let overlayWindow = NSWindow(
                 contentRect: NSRect(
-                    x: frame.topLeftX, 
-                    y: frame.topLeftY, 
-                    width: frame.width, 
+                    x: frame.topLeftX,
+                    y: frame.topLeftY,
+                    width: frame.width,
                     height: frame.height
                 ),
                 styleMask: [.borderless],
                 backing: .buffered,
                 defer: false
             )
-            
+
             overlayWindow.isReleasedWhenClosed = false
             overlayWindow.level = .floating
             overlayWindow.backgroundColor = .clear
             overlayWindow.isOpaque = false
             overlayWindow.hasShadow = false
             overlayWindow.ignoresMouseEvents = true
-            
+
             // Create view for the border in our custom window
             let borderLayer = CALayer()
             borderLayer.frame = NSRect(x: 0, y: 0, width: frame.width, height: frame.height)
             borderLayer.borderWidth = borderWidth
             borderLayer.borderColor = focusedBorderColor.cgColor
-            
+
             let view = NSView(frame: NSRect(x: 0, y: 0, width: frame.width, height: frame.height))
             view.wantsLayer = true
             view.layer?.addSublayer(borderLayer)
-            
+
             overlayWindow.contentView = view
             overlayWindow.orderFront(nil)
-            
+
             // Store reference
             self.borderView = view
-            
-            print("DEBUG: Created custom overlay window for border")
+
             return
         }
-        
+
         // If we found a window to use, add our border view to it
         if let window = targetWindow {
             // Create view for the border
-            let view = NSView(frame: NSRect(
-                x: frame.topLeftX, 
-                y: frame.topLeftY, 
-                width: frame.width, 
-                height: frame.height
-            ))
-            
+            let view = NSView(
+                frame: NSRect(
+                    x: frame.topLeftX,
+                    y: frame.topLeftY,
+                    width: frame.width,
+                    height: frame.height
+                ))
+
             // Configure the view
             view.wantsLayer = true
             view.layer?.backgroundColor = NSColor.clear.cgColor
-            
+
             // Create border layer
             let borderLayer = CALayer()
             borderLayer.frame = view.bounds
             borderLayer.borderWidth = borderWidth
             borderLayer.borderColor = focusedBorderColor.cgColor
             borderLayer.cornerRadius = 0
-            
+
             // Add border layer to view
             view.layer?.addSublayer(borderLayer)
-            
+
             // Add view to window
             window.contentView?.addSubview(view)
-            
+
             // Store reference
             self.borderView = view
-            
-            print("DEBUG: Border view added to window")
-        } else {
-            print("DEBUG: No suitable window found to add border")
+
         }
     }
-    
+
     /// Hide the border
     func hideBorder() {
         if let view = borderView {
-            print("DEBUG: Hiding border for split \(emptySplit.id)")
             view.removeFromSuperview()
             // If we have a parent window that is our custom overlay, close it
-            if let parentWindow = view.window, 
-               parentWindow.styleMask == [.borderless], 
-               parentWindow.ignoresMouseEvents {
+            if let parentWindow = view.window,
+                parentWindow.styleMask == [.borderless],
+                parentWindow.ignoresMouseEvents
+            {
                 parentWindow.close()
             }
             borderView = nil
-- 
2.39.5 (Apple Git-154)

