From c29121483b20e169e9b1545af6132bead78c2d12 Mon Sep 17 00:00:00 2001
From: santhoshr <santhoshr@live.com>
Date: Fri, 28 Feb 2025 00:18:54 +0530
Subject: [PATCH] Fix for tool window moving into split

---
 Sources/AppBundle/tree/MacWindow.swift | 43 ++++++++++++++++++++++++++
 1 file changed, 43 insertions(+)

diff --git a/Sources/AppBundle/tree/MacWindow.swift b/Sources/AppBundle/tree/MacWindow.swift
index 41282ac..235cb77 100644
--- a/Sources/AppBundle/tree/MacWindow.swift
+++ b/Sources/AppBundle/tree/MacWindow.swift
@@ -365,6 +365,13 @@ extension Window {
 
 // The function is private because it's "unsafe". It requires the window to be in unbound state
 private func getBindingDataForNewWindow(_ axWindow: AXUIElement, _ workspace: Workspace, _ app: MacApp) -> BindingData {
+    // First determine if this is a utility, menu, or launcher app that should remain floating
+    // and never be put into empty splits
+    if isUtilityOrMenuApp(app, axWindow) {
+        print("DEBUG: Detected utility/launcher app - keeping as floating window")
+        return BindingData(parent: workspace, adaptiveWeight: WEIGHT_AUTO, index: INDEX_BIND_LAST)
+    }
+    
     // Top priority: Always check for empty splits first, regardless of window type
     // This ensures even dialog windows can be placed in empty splits if available
     
@@ -413,6 +420,42 @@ private func getBindingDataForNewWindow(_ axWindow: AXUIElement, _ workspace: Wo
     return getBindingDataForNewTilingWindow(workspace)
 }
 
+/// Determine if an app is a utility, menu, or launcher app that should remain floating
+/// and never be placed in empty splits
+private func isUtilityOrMenuApp(_ app: MacApp, _ axWindow: AXUIElement) -> Bool {
+    // List of common utility app bundle IDs
+    let utilityApps = [
+        "at.obdev.LaunchBar",           // LaunchBar
+        "com.extendmac.Keyboard-Pilot", // Keyboard Pilot
+        "com.raycast.macos",            // Raycast
+        "com.manytricks.Moom",          // Moom
+        "com.knollsoft.Rectangle",      // Rectangle
+        "com.runningwithcrayons.Alfred", // Alfred
+        "com.bjango.istatmenus.status", // iStat Menus
+        "io.element.menubar",           // Element Chat
+        "com.apple.systemuiserver",     // System UI Server (menu extras)
+        "org.hammerspoon.Hammerspoon",  // Hammerspoon
+        "com.agilebits.onepassword7",   // 1Password
+        "com.culturedcode.ThingsMac",   // Things
+        "com.tinyspeck.slackmacgap",    // Slack
+        "com.whatsapp.WhatsApp"         // WhatsApp
+    ]
+    
+    // Return true if the app is in our utility app list
+    if let appId = app.id, utilityApps.contains(appId) {
+        return true
+    }
+    
+    // Check for utility window role/subrole
+    let role = axWindow.get(Ax.roleAttr)
+    let subrole = axWindow.get(Ax.subroleAttr)
+    
+    return role == "AXSystemFloatingWindow" || 
+           subrole == "AXSystemDialog" ||
+           subrole == "AXUtilityWindow" ||
+           subrole == "AXStatusItem"
+}
+
 // The function is private because it's "unsafe". It requires the window to be in unbound state
 private func getBindingDataForNewTilingWindow(_ workspace: Workspace) -> BindingData {
     // First, check if there's a focused empty split in the workspace
-- 
2.39.5 (Apple Git-154)

