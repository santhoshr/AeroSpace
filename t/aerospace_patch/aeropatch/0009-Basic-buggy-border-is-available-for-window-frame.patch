From a1e837124ac27f464ee18ce8226fc6820b098c7e Mon Sep 17 00:00:00 2001
From: santhoshr <santhoshr@live.com>
Date: Fri, 28 Feb 2025 05:13:05 +0530
Subject: [PATCH] Basic buggy border is available for window frames

---
 Sources/AppBundle/FocusedWindowBorder.swift   | 65 +++++++++++++++++
 Sources/AppBundle/StartupManager.swift        |  8 ++-
 .../command/impl/EnableCommand.swift          | 26 +++++--
 Sources/AppBundle/focus.swift                 | 71 ++++++-------------
 4 files changed, 113 insertions(+), 57 deletions(-)
 create mode 100644 Sources/AppBundle/FocusedWindowBorder.swift

diff --git a/Sources/AppBundle/FocusedWindowBorder.swift b/Sources/AppBundle/FocusedWindowBorder.swift
new file mode 100644
index 0000000..2b6e3e1
--- /dev/null
+++ b/Sources/AppBundle/FocusedWindowBorder.swift
@@ -0,0 +1,65 @@
+import AppKit
+
+class FocusedWindowBorder {
+    static let shared = FocusedWindowBorder()
+    private var borderWindow: NSWindow?
+    private let borderWidth: CGFloat = 4.0
+    private let borderColor: NSColor = NSColor(red: 0.2, green: 0.6, blue: 1.0, alpha: 0.8)
+    
+    func showBorder(frame: NSRect) {
+        let borderFrame = frame.insetBy(dx: -borderWidth, dy: -borderWidth)
+        
+        if let existingWindow = borderWindow {
+            existingWindow.setFrame(borderFrame, display: true)
+        } else {
+            let window = NSWindow(
+                contentRect: borderFrame,
+                styleMask: .borderless,
+                backing: .buffered,
+                defer: false)
+            
+            // Make window completely transparent
+            window.isOpaque = false
+            window.backgroundColor = .clear
+            window.hasShadow = false
+            window.ignoresMouseEvents = true
+            window.isReleasedWhenClosed = false
+            window.collectionBehavior = [.canJoinAllSpaces, .stationary, .ignoresCycle]
+            window.level = NSWindow.Level(rawValue: Int(CGWindowLevelForKey(.mainMenuWindow)) + 1)
+            
+            // Use simple NSView instead of NSVisualEffectView for pure transparency
+            let borderView = NSView(frame: NSRect(origin: .zero, size: borderFrame.size))
+            borderView.wantsLayer = true
+            
+            // Configure border
+            borderView.layer?.backgroundColor = .clear
+            borderView.layer?.borderWidth = borderWidth
+            borderView.layer?.borderColor = borderColor.cgColor
+            borderView.layer?.cornerRadius = 6.0
+            borderView.layer?.masksToBounds = true
+            
+            window.contentView = borderView
+            borderView.autoresizingMask = [.width, .height]
+            
+            self.borderWindow = window
+        }
+        
+        borderWindow?.orderFront(nil)
+        
+        // Gentle fade-in animation
+        if let layer = borderWindow?.contentView?.layer {
+            layer.removeAllAnimations()
+            
+            let animation = CABasicAnimation(keyPath: "borderColor")
+            animation.fromValue = borderColor.withAlphaComponent(0.3).cgColor
+            animation.toValue = borderColor.cgColor
+            animation.duration = 0.2
+            animation.timingFunction = CAMediaTimingFunction(name: .easeInEaseOut)
+            layer.add(animation, forKey: "borderFade")
+        }
+    }
+    
+    func hideBorder() {
+        borderWindow?.orderOut(nil)
+    }
+}
diff --git a/Sources/AppBundle/StartupManager.swift b/Sources/AppBundle/StartupManager.swift
index 73db60f..cd7dbc5 100644
--- a/Sources/AppBundle/StartupManager.swift
+++ b/Sources/AppBundle/StartupManager.swift
@@ -4,6 +4,8 @@ import Foundation
 /// Handles initialization of various subsystems during application startup
 class StartupManager {
     static let shared = StartupManager()
-    
-    private init() {}
-}
\ No newline at end of file
+
+    private init() {
+        // No need for delayed initialization since we're not using notifications
+    }
+}
diff --git a/Sources/AppBundle/command/impl/EnableCommand.swift b/Sources/AppBundle/command/impl/EnableCommand.swift
index 611b8c1..c6cac51 100644
--- a/Sources/AppBundle/command/impl/EnableCommand.swift
+++ b/Sources/AppBundle/command/impl/EnableCommand.swift
@@ -1,17 +1,24 @@
 import AppKit
 import Common
 
-struct EnableCommand: Command {
+
+struct EnableCommand: Command, Equatable {
     let args: EnableCmdArgs
+    let focusedWindowBorder = FocusedWindowBorder()
 
     func run(_ env: CmdEnv, _ io: CmdIo) -> Bool {
         check(Thread.current.isMainThread)
         let prevState = TrayMenuModel.shared.isEnabled
-        let newState: Bool = switch args.targetState.val {
-            case .on: true
-            case .off: false
-            case .toggle: !TrayMenuModel.shared.isEnabled
+        let newState: Bool
+        switch args.targetState.val {
+            case .on:
+                newState = true
+            case .off:
+                newState = false
+            case .toggle:
+                newState = !TrayMenuModel.shared.isEnabled
         }
+        
         if newState == prevState {
             io.out((newState ? "Already enabled" : "Already disabled") +
                 "Tip: use --fail-if-noop to exit with non-zero code")
@@ -32,7 +39,14 @@ struct EnableCommand: Command {
                 workspace.allLeafWindowsRecursive.forEach { ($0 as! MacWindow).unhideFromCorner() } // todo as!
                 workspace.layoutWorkspace() // Unhide tiling windows from corner
             }
+            focusedWindowBorder.hideBorder()
         }
-        return true
+    return true
+}
+}
+
+    extension EnableCommand {
+        static func == (lhs: EnableCommand, rhs: EnableCommand) -> Bool {
+        return lhs.args == rhs.args
     }
 }
diff --git a/Sources/AppBundle/focus.swift b/Sources/AppBundle/focus.swift
index 4a24f2b..6bfb71b 100644
--- a/Sources/AppBundle/focus.swift
+++ b/Sources/AppBundle/focus.swift
@@ -104,7 +104,6 @@ func setFocus(to newFocus: LiveFocus) -> Bool {
     if let oldEmptySplit = oldFocus.emptySplitOrNil, 
        let visual = emptySplitVisuals[oldEmptySplit.id] {
         visual.hideBorder()
-        // hideActiveSplitBorder
     }
 
     _focus = newFocus.frozen
@@ -119,8 +118,8 @@ func setFocus(to newFocus: LiveFocus) -> Bool {
         visual.showBorder()
     }
     
-    // Send notification after focus has changed
-    sendFocusChangeNotification(oldFocus: oldFocus, newFocus: newFocus)
+    // Update focus border directly instead of using notifications
+    updateFocusBorder(oldFocus: oldFocus, newFocus: newFocus)
     
     return status
 }
@@ -215,8 +214,29 @@ private func onFocusedMonitorChanged(_ focus: LiveFocus) {
     if config.onFocusedMonitorChanged.isEmpty { return }
     _ = config.onFocusedMonitorChanged.runCmdSeq(.defaultEnv.withFocus(focus), .emptyStdin)
 }
+
+private func updateFocusBorder(oldFocus: LiveFocus, newFocus: LiveFocus) {
+    if let window = newFocus.windowOrNil {
+        if let topLeft = window.getTopLeftCorner(), 
+           let size = window.getSize() {
+            let focusedFrame = NSRect(x: topLeft.x, y: topLeft.y, 
+                                    width: size.width, height: size.height)
+            FocusedWindowBorder.shared.showBorder(frame: focusedFrame)
+        }
+    } else if let emptySplit = newFocus.emptySplitOrNil, 
+              let rect = emptySplit.getFrameForRendering() {
+        let focusedFrame = NSRect(x: rect.topLeftX, y: rect.topLeftY, 
+                                width: rect.width, height: rect.height)
+        FocusedWindowBorder.shared.showBorder(frame: focusedFrame)
+    } else {
+        FocusedWindowBorder.shared.hideBorder()
+    }
+}
+
 private func onFocusChanged(_ focus: LiveFocus) {
     if config.onFocusChanged.isEmpty { return }
+    // Use nil coalescing to handle optional prevFocus
+    updateFocusBorder(oldFocus: prevFocus ?? focus, newFocus: focus)
     _ = config.onFocusChanged.runCmdSeq(.defaultEnv.withFocus(focus), .emptyStdin)
 }
 
@@ -232,48 +252,3 @@ private func onWorkspaceChanged(_ oldWorkspace: String, _ newWorkspace: String)
         Result { try process.run() }.getOrThrow() // todo It's not perfect to fail here
     }
 }
-
-// Sends notification about focus change with relevant frames
-private func sendFocusChangeNotification(oldFocus: LiveFocus, newFocus: LiveFocus) {
-    // Get the current workspace
-    let workspace = newFocus.workspace
-    
-    // Collect the frames for focused and unfocused windows/splits
-    var focusedFrame: NSRect?
-    var inactiveFrames: [NSRect] = []
-    
-    // Get focused window/split frame
-    if let window = newFocus.windowOrNil {
-        if let topLeft = window.getTopLeftCorner(), let size = window.getSize() {
-            focusedFrame = NSRect(x: topLeft.x, y: topLeft.y, width: size.width, height: size.height)
-        }
-    } else if let emptySplit = newFocus.emptySplitOrNil, let rect = emptySplit.getFrameForRendering() {
-        focusedFrame = NSRect(x: rect.topLeftX, y: rect.topLeftY, width: rect.width, height: rect.height)
-    }
-    
-    // Get inactive window frames in the same workspace
-    for window in workspace.allLeafWindowsRecursive {
-        if window != newFocus.windowOrNil, let topLeft = window.getTopLeftCorner(), let size = window.getSize() {
-            inactiveFrames.append(NSRect(x: topLeft.x, y: topLeft.y, width: size.width, height: size.height))
-        }
-    }
-    
-    // Get inactive empty split frames
-    for emptySplit in workspace.allEmptySplitsRecursive {
-        if emptySplit != newFocus.emptySplitOrNil, let rect = emptySplit.getFrameForRendering() {
-            inactiveFrames.append(NSRect(x: rect.topLeftX, y: rect.topLeftY, width: rect.width, height: rect.height))
-        }
-    }
-    
-    // Only send notification if we have valid frames
-    if let focusedFrameRect = focusedFrame {
-        NotificationCenter.default.post(
-            name: NSNotification.Name("AeroSpaceFocusChanged"),
-            object: nil,
-            userInfo: [
-                "focusedWindowFrame": focusedFrameRect,
-                "inactiveWindowFrames": inactiveFrames
-            ]
-        )
-    }
-}
-- 
2.39.5 (Apple Git-154)

