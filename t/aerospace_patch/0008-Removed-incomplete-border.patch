From 8d877e10492a02331383d564954fe6389a35dcae Mon Sep 17 00:00:00 2001
From: santhoshr <santhoshr@live.com>
Date: Fri, 28 Feb 2025 04:04:07 +0530
Subject: [PATCH] Removed incomplete border

---
 AeroSpace.xcodeproj/project.pbxproj          |   2 -
 Sources/AppBundle/BorderOverlayManager.swift | 164 -------------------
 Sources/AppBundle/MenuBar.swift              |   6 -
 Sources/AppBundle/StartupManager.swift       |  15 --
 Sources/AppBundle/TrayMenuModel.swift        | 117 +++----------
 Sources/AppBundle/focus.swift                |   5 +-
 Sources/AppBundle/initAppBundle.swift        |   3 -
 Sources/AppBundle/layout/refresh.swift       |   1 -
 8 files changed, 21 insertions(+), 292 deletions(-)
 delete mode 100644 Sources/AppBundle/BorderOverlayManager.swift

diff --git a/AeroSpace.xcodeproj/project.pbxproj b/AeroSpace.xcodeproj/project.pbxproj
index 0ba6826..d35e2d4 100644
--- a/AeroSpace.xcodeproj/project.pbxproj
+++ b/AeroSpace.xcodeproj/project.pbxproj
@@ -20,7 +20,6 @@
 		84C35D8E25B61D4D1ADB1851 /* Assets.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; path = Assets.xcassets; sourceTree = "<group>"; };
 		8FE45A887100EB70912B07F0 /* default-config.toml */ = {isa = PBXFileReference; path = "default-config.toml"; sourceTree = "<group>"; };
 		CF85755BFF66B59A84F98262 /* AeroSpace.entitlements */ = {isa = PBXFileReference; lastKnownFileType = text.plist.entitlements; path = AeroSpace.entitlements; sourceTree = "<group>"; };
-		NEW_FILE_REF_ID /* BorderOverlayManager.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = BorderOverlayManager.swift; sourceTree = "<group>"; };
 /* End PBXFileReference section */
 
 /* Begin PBXFrameworksBuildPhase section */
@@ -161,7 +160,6 @@
 			buildActionMask = 2147483647;
 			files = (
 				C40E0D9C06086C58955237D9 /* AeroSpaceApp.swift in Sources */,
-				NEW_BUILD_FILE_ID /* BorderOverlayManager.swift in Sources */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
diff --git a/Sources/AppBundle/BorderOverlayManager.swift b/Sources/AppBundle/BorderOverlayManager.swift
deleted file mode 100644
index d987a06..0000000
--- a/Sources/AppBundle/BorderOverlayManager.swift
+++ /dev/null
@@ -1,164 +0,0 @@
-import AppKit
-import Foundation
-import Common
-
-class BorderOverlayManager {
-    static let shared = BorderOverlayManager()
-
-    private init() {}
-
-    func setup() {
-        // Implementation for setup
-    }
-
-    func showEntireScreenBorder() {
-        // Implementation for showing entire screen border
-    }
-
-    func hideEntireScreenBorder() {
-        // Implementation for hiding entire screen border
-    }
-
-    func hideActiveSplitBorder() {
-        // Implementation for hiding active split border
-    }
-
-    func hideInactiveSplitBorders() {
-        // Implementation for hiding inactive split borders
-    }
-
-    func showActiveSplitBorder(frame: NSRect) {
-        // Implementation for showing active split border
-    }
-
-    func showInactiveSplitBorders(frames: [NSRect]) {
-        // Implementation for showing inactive split borders
-    }
-}
-
-/// A manager class that integrates border visualization with AeroSpace's window management system
-class BorderIntegrationManager {
-    static let shared = BorderIntegrationManager()
-    
-    private var isEnabled = true
-    private var fullscreenBorderVisible = false
-    
-    private init() {}
-    
-    /// Setup the border manager and integrate with AeroSpace
-    func setup() {
-        // Setup the BorderOverlayManager
-        BorderOverlayManager.shared.setup()
-        
-        // Register for focus change notifications
-        NotificationCenter.default.addObserver(
-            self,
-            selector: #selector(onFocusChanged),
-            name: NSNotification.Name("AeroSpaceFocusChanged"),
-            object: nil
-        )
-        
-        // Register for window split notifications
-        NotificationCenter.default.addObserver(
-            self,
-            selector: #selector(onWindowSplit),
-            name: NSNotification.Name("AeroSpaceWindowSplit"),
-            object: nil
-        )
-        
-        // Register for application startup completion
-        NotificationCenter.default.addObserver(
-            self,
-            selector: #selector(onAppStartupComplete),
-            name: NSNotification.Name("AeroSpaceStartupComplete"),
-            object: nil
-        )
-    }
-    
-    /// Called when the app startup is complete
-    @objc private func onAppStartupComplete() {
-        showFullscreenBorder()
-    }
-    
-    /// Called when focus changes between windows
-    @objc func onFocusChanged(_ notification: Notification) {
-        guard isEnabled else { return }
-        
-        // If we have active and inactive windows in a split, update their borders
-        if let userInfo = notification.userInfo,
-           let focusedWindowFrame = userInfo["focusedWindowFrame"] as? NSRect,
-           let inactiveWindowFrames = userInfo["inactiveWindowFrames"] as? [NSRect] {
-            updateBordersForSplit(focusedFrame: focusedWindowFrame, inactiveFrames: inactiveWindowFrames)
-        }
-    }
-    
-    /// Called when a window is split
-    @objc func onWindowSplit(_ notification: Notification) {
-        guard isEnabled else { return }
-        
-        if fullscreenBorderVisible {
-            hideFullscreenBorder()
-        }
-        
-        // If we have information about the split windows, show their borders
-        if let userInfo = notification.userInfo,
-           let activeFrame = userInfo["activeFrame"] as? NSRect,
-           let inactiveFrames = userInfo["inactiveFrames"] as? [NSRect] {
-            updateBordersForSplit(focusedFrame: activeFrame, inactiveFrames: inactiveFrames)
-        }
-    }
-    
-    /// Show fullscreen border around the entire screen
-    func showFullscreenBorder() {
-        guard isEnabled else { return }
-        
-        BorderOverlayManager.shared.showEntireScreenBorder()
-        fullscreenBorderVisible = true
-    }
-    
-    /// Hide fullscreen border
-    func hideFullscreenBorder() {
-        BorderOverlayManager.shared.hideEntireScreenBorder()
-        fullscreenBorderVisible = false
-    }
-    
-    /// Update borders for split windows
-    private func updateBordersForSplit(focusedFrame: NSRect, inactiveFrames: [NSRect]) {
-        // Hide any existing borders first
-        BorderOverlayManager.shared.hideActiveSplitBorder()
-        BorderOverlayManager.shared.hideInactiveSplitBorders()
-        
-        // Show new borders
-        BorderOverlayManager.shared.showActiveSplitBorder(frame: focusedFrame)
-        if !inactiveFrames.isEmpty {
-            BorderOverlayManager.shared.showInactiveSplitBorders(frames: inactiveFrames)
-        }
-    }
-    
-    /// Enable or disable border visualization
-    func setEnabled(_ enabled: Bool) {
-        isEnabled = enabled
-        
-        if !isEnabled {
-            // Hide all borders when disabled
-            BorderOverlayManager.shared.hideEntireScreenBorder()
-            BorderOverlayManager.shared.hideActiveSplitBorder()
-            BorderOverlayManager.shared.hideInactiveSplitBorders()
-        }
-    }
-    
-    /// Helper method to get frame for a window
-    func getFrameForWindow(_ window: Window) -> NSRect? {
-        guard let topLeft = window.getTopLeftCorner(),
-              let size = window.getSize() else {
-            return nil
-        }
-        
-        return NSRect(
-            x: topLeft.x,
-            y: topLeft.y,
-            width: size.width,
-            height: size.height
-        )
-    }
-}
\ No newline at end of file
diff --git a/Sources/AppBundle/MenuBar.swift b/Sources/AppBundle/MenuBar.swift
index 6877610..e7f0447 100644
--- a/Sources/AppBundle/MenuBar.swift
+++ b/Sources/AppBundle/MenuBar.swift
@@ -22,12 +22,6 @@ public func menuBar(viewModel: TrayMenuModel) -> some Scene { // todo should it
                 }
             }
             Divider()
-            
-            // Add Border Visualization toggle
-            Button(viewModel.isBorderEnabled ? "Hide Borders" : "Show Borders") {
-                viewModel.toggleBorderVisibility()
-            }.keyboardShortcut("B", modifiers: .command)
-            Divider()
         }
         Button(viewModel.isEnabled ? "Disable" : "Enable") {
             refreshSession(.menuBarButton, screenIsDefinitelyUnlocked: true) {
diff --git a/Sources/AppBundle/StartupManager.swift b/Sources/AppBundle/StartupManager.swift
index e3fee93..73db60f 100644
--- a/Sources/AppBundle/StartupManager.swift
+++ b/Sources/AppBundle/StartupManager.swift
@@ -6,19 +6,4 @@ class StartupManager {
     static let shared = StartupManager()
     
     private init() {}
-    
-    /// Initialize border system for window management visualization
-    func initBorderSystem() {
-        // Initialize the border integration manager
-        BorderIntegrationManager.shared.setup()
-        
-        // Post notification that app startup is complete
-        // This will trigger the fullscreen border to be shown
-        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
-            NotificationCenter.default.post(
-                name: NSNotification.Name("AeroSpaceStartupComplete"),
-                object: nil
-            )
-        }
-    }
 }
\ No newline at end of file
diff --git a/Sources/AppBundle/TrayMenuModel.swift b/Sources/AppBundle/TrayMenuModel.swift
index 075c721..05f1850 100644
--- a/Sources/AppBundle/TrayMenuModel.swift
+++ b/Sources/AppBundle/TrayMenuModel.swift
@@ -12,107 +12,30 @@ public class TrayMenuModel: ObservableObject {
     /// Is border visualization enabled
     @Published var isBorderEnabled: Bool = true
     @Published var workspaces: [WorkspaceViewModel] = []
-    
-    /// Toggle border visualization on/off
-    func toggleBorderVisibility() {
-        isBorderEnabled.toggle()
-        BorderIntegrationManager.shared.setEnabled(isBorderEnabled)
-        
-        // If borders are enabled and there's a focused window, update its border
-        if isBorderEnabled {
-            // If we have splits, show appropriate borders
-            if let focusedWindow = focus.windowOrNil, 
-               let topLeft = focusedWindow.getTopLeftCorner(),
-               let size = focusedWindow.getSize() {
-                // Get all sibling windows/splits
-                var inactiveFrames: [NSRect] = []
-                if let parent = focusedWindow.parent as? TilingContainer {
-                    for child in parent.children {
-                        if child != focusedWindow, let childWindow = child as? Window, 
-                           let childTopLeft = childWindow.getTopLeftCorner(), 
-                           let childSize = childWindow.getSize() {
-                            inactiveFrames.append(NSRect(
-                                x: childTopLeft.x,
-                                y: childTopLeft.y,
-                                width: childSize.width,
-                                height: childSize.height
-                            ))
-                        } else if child != focusedWindow, let childSplit = child as? EmptySplit, 
-                                  let childFrame = childSplit.getFrameForRendering() {
-                            inactiveFrames.append(NSRect(
-                                x: childFrame.topLeftX,
-                                y: childFrame.topLeftY,
-                                width: childFrame.width,
-                                height: childFrame.height
-                            ))
-                        }
-                    }
-                    
-                    if !inactiveFrames.isEmpty {
-                        let focusedFrame = NSRect(
-                            x: topLeft.x,
-                            y: topLeft.y,
-                            width: size.width,
-                            height: size.height
-                        )
-                        BorderIntegrationManager.shared.onFocusChanged(Notification(
-                            name: NSNotification.Name("AeroSpaceFocusChanged"),
-                            object: nil,
-                            userInfo: [
-                                "focusedWindowFrame": focusedFrame,
-                                "inactiveWindowFrames": inactiveFrames
-                            ]
-                        ))
-                    } else {
-                        // No splits yet, show fullscreen border
-                        BorderIntegrationManager.shared.showFullscreenBorder()
-                    }
-                } else {
-                    // No splits yet, show fullscreen border
-                    BorderIntegrationManager.shared.showFullscreenBorder()
-                }
-            } else if let emptySplit = focus.emptySplitOrNil, 
-                      let frame = emptySplit.getFrameForRendering() {
-                // Show border for empty split focus
-                let focusedFrame = NSRect(
-                    x: frame.topLeftX,
-                    y: frame.topLeftY,
-                    width: frame.width,
-                    height: frame.height
-                )
-                BorderIntegrationManager.shared.onFocusChanged(Notification(
-                    name: NSNotification.Name("AeroSpaceFocusChanged"),
-                    object: nil,
-                    userInfo: [
-                        "focusedWindowFrame": focusedFrame,
-                        "inactiveWindowFrames": []
-                    ]
-                ))
-            } else {
-                // No window or split focus yet, show fullscreen border
-                BorderIntegrationManager.shared.showFullscreenBorder()
+
+    func updateTrayText() {
+        let sortedMonitors = sortedMonitors
+        let focus = focus
+        TrayMenuModel.shared.trayText =
+            (activeMode?.takeIf { $0 != mainModeId }?.first?.lets { "[\($0.uppercased())] " } ?? "")
+            + sortedMonitors
+            .map {
+                ($0.activeWorkspace == focus.workspace && sortedMonitors.count > 1 ? "*" : "")
+                    + $0.activeWorkspace.name
             }
+            .joined(separator: " │ ")
+        TrayMenuModel.shared.workspaces = Workspace.all.map {
+            let monitor =
+                $0.isVisible || !$0.isEffectivelyEmpty ? " - \($0.workspaceMonitor.name)" : ""
+            return WorkspaceViewModel(
+                name: $0.name, suffix: monitor, isFocused: focus.workspace == $0)
         }
     }
-}
 
-func updateTrayText() {
-    let sortedMonitors = sortedMonitors
-    let focus = focus
-    TrayMenuModel.shared.trayText = (activeMode?.takeIf { $0 != mainModeId }?.first?.lets { "[\($0.uppercased())] " } ?? "") +
-        sortedMonitors
-        .map {
-            ($0.activeWorkspace == focus.workspace && sortedMonitors.count > 1 ? "*" : "") + $0.activeWorkspace.name
-        }
-        .joined(separator: " │ ")
-    TrayMenuModel.shared.workspaces = Workspace.all.map {
-        let monitor = $0.isVisible || !$0.isEffectivelyEmpty ? " - \($0.workspaceMonitor.name)" : ""
-        return WorkspaceViewModel(name: $0.name, suffix: monitor, isFocused: focus.workspace == $0)
+    struct WorkspaceViewModel {
+        let name: String
+        let suffix: String
+        let isFocused: Bool
     }
-}
 
-struct WorkspaceViewModel {
-    let name: String
-    let suffix: String
-    let isFocused: Bool
 }
diff --git a/Sources/AppBundle/focus.swift b/Sources/AppBundle/focus.swift
index 6b7f773..4a24f2b 100644
--- a/Sources/AppBundle/focus.swift
+++ b/Sources/AppBundle/focus.swift
@@ -104,7 +104,7 @@ func setFocus(to newFocus: LiveFocus) -> Bool {
     if let oldEmptySplit = oldFocus.emptySplitOrNil, 
        let visual = emptySplitVisuals[oldEmptySplit.id] {
         visual.hideBorder()
-        BorderOverlayManager.shared.hideActiveSplitBorder() // Changed from BorderIntegrationManager to BorderOverlayManager
+        // hideActiveSplitBorder
     }
 
     _focus = newFocus.frozen
@@ -117,9 +117,6 @@ func setFocus(to newFocus: LiveFocus) -> Bool {
     if let newEmptySplit = newFocus.emptySplitOrNil,
        let visual = emptySplitVisuals[newEmptySplit.id] {
         visual.showBorder()
-        if let frame = newEmptySplit.getFrameForRendering()?.nsRect {
-            BorderOverlayManager.shared.showActiveSplitBorder(frame: frame)
-        }
     }
     
     // Send notification after focus has changed
diff --git a/Sources/AppBundle/initAppBundle.swift b/Sources/AppBundle/initAppBundle.swift
index 3915f13..87f0b6e 100644
--- a/Sources/AppBundle/initAppBundle.swift
+++ b/Sources/AppBundle/initAppBundle.swift
@@ -31,9 +31,6 @@ public func initAppBundle() {
             _ = config.afterLoginCommand.runCmdSeq(.defaultEnv, .emptyStdin)
         }
         _ = config.afterStartupCommand.runCmdSeq(.defaultEnv, .emptyStdin)
-        
-        // Initialize the border system after startup is complete
-        StartupManager.shared.initBorderSystem()
     }
 }
 
diff --git a/Sources/AppBundle/layout/refresh.swift b/Sources/AppBundle/layout/refresh.swift
index e593ad2..b6462f9 100644
--- a/Sources/AppBundle/layout/refresh.swift
+++ b/Sources/AppBundle/layout/refresh.swift
@@ -34,7 +34,6 @@ func refreshSession<T>(_ event: RefreshSessionEvent, screenIsDefinitelyUnlocked:
             focusAfter?.nativeFocus() // syncFocusToMacOs
         }
 
-        updateTrayText()
         normalizeLayoutReason(startup: startup)
         layoutWorkspaces()
     }
-- 
2.39.5 (Apple Git-154)

